'scopeName': 'source.schwalbe'
'name': 'Schwalbe'
'fileTypes': ['schwalbe']

'firstLineMatch': '^#!\\s*/.*\\bschwalbe'
'patterns': [
  {
    'name': 'keyword.others.schwalbe'
    'match': '^\\s*(#falls|#ansonsten|#beendefalls|#andernfalls|@warn_unused_result|@discardableResult|@IBAction|@IBOutlet|@IBDesignable|@IBInspectable)\\b'
  }
  {
    'name': 'keyword.declaration.schwalbe'
    'match': '\\b(deinitialisere|importiere|initialisiere|indiziere)\\b'
  }
  {
    'name': 'storage.type.schwalbe'
    'match': '\\b(precedencegroup|klasse|struktur|aufzählung|erweiterung|protokoll|sei|var|typalias)\\b'
  }
  {
    'name': 'storage.modifier.schwalbe'
    'match': '\\b(final|intern|privat|dateiprivat|öffentlich|offen|statisch|erforderlich|bequem)\\b'
  }
  {
    'name': 'keyword.statement.schwalbe'
    'match': '\\b(versuche|fange|wiederhole|brichaus|fürdenfall|fahrefort|standardmäßig|mache|ansonsten|falledurch|falls|in|für|antworte|rangiere|wobei|während|stellesicher|verzögere)\\b'
  }
  {
    'name': 'support.type.schwalbe'
    'match': '(?x) \\b(Character|U?Ganzzahl|U?Ganzzahl(8|16|32|64)
      |Kurzefließkommazahl|Fließkommazahl|Kurzefließkommazahl(32|64)|Boolescherausdruck|Zeichenkette|Date|Data|URL
      |(double|float)[234]|(double|float)[234]x[234]
      |Beliebig
      |AnyObject
      |Fehler
      |Gleichsetzbar
      |Hashable
      |Vergleichbar
      |CustomDebugStringConvertible
      |Zuzeichenketteumwandelbar
      |OptionSet
      |ManagedBuffer
      |ManagedBufferPointer
      |BitwiseOperations
      |CountedSet
      |Counter
      |Directions
      |ExpressibleByArrayLiteral
      |ExpressibleByBooleanLiteral
      |ExpressibleByDictionaryLiteral
      |ExpressibleByExtendedGraphemeClusterLiteral
      |ExpressibleByFloatLitera
      |ExpressibleByIntegerLiteral
      |ExpressibleByNilLiteral
      |ExpressibleByStringInterpolation
      |ExpressibleByStringLiteral
      |ExpressibleByUnicodeScalarLiteral
      |OrderedSet
      |PaperSize
      |RawRepresentable
      |(UI|NS|CF|CG)[A-Z][a-zA-Z0-9]+
      |Stream
      |(In|Out)putStream
      |FileManager
      |Anordnung
      |Unsafe[a-zA-Z]*Pointer
      |Bundle
      |Jex)\\b'
  }
  {
    'name': 'support.function.schwalbe'
    'match': '\\b(assert|assertionFailure|drucke)\\b'
  }
  {
    'name': 'keyword.expressions-and-types.schwalbe'
    'match': '\\b(als|dynamicType|ist|new|super|selbst|Selbst|Typ|#spalte|#datei|#funktion|#zeile)\\b'
  }
  {
    'name': 'keyword.reserved.schwalbe'
    'match': '\\b(assoziativität|wurdeGesetzt|hole|eingefügt|reinraus|links|mutierend|nichtmutierend|operator|überschreibe|angehängt|präzedenz|vorangehängt|rechts|setze|herrenlos|herrenlos\(safe\)|herrenlos\(unsafe\)|schwach|werdeSetzen)\\b'
  }
  {
    'name': 'constant.language.schwalbe'
    'match': '\\b(wahr|falsch|nix|none)\\b'
  }
  {
    'name': 'entity.name.function.schwalbe'
    'match': '\\bfunktion\\s+([^\\t\\n\\x20\\x28]+)'
  }
  {
    'include': '#comment'
  }
  {
    'include': '#literal'
  }
  # {
  #   'include': '#funktion'
  # }
  {
    'include': '#operator'
  }
]
'repository':
  'comment':
    'patterns': [
      {
        'name': 'comment.block.schwalbe'
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.schwalbe'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.schwalbe'
        'patterns': [
          {
            'include': '#comment'
          }
        ]
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.schwalbe'
        'end': '(?!\\G)'
        'patterns': [
          {
            'name': 'comment.line.double-slash.schwalbe'
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.schwalbe'
            'end': '\\n'
            'patterns': [
              {
                'name': 'punctuation.separator.continuation.schwalbe'
                'match': '(?>\\\\\\s*\\n)'
              }
            ]
          }
        ]
      }
    ]
  'escaped-char':
    'patterns': [
      {
        'name': 'constant.character.escape.schwalbe'
        'match': '\\\\[0\\\\tnr"\']'
      }
      {
        'name': 'constant.character.escape.schwalbe'
        'match': '\\\\(x\\h{2}|u\\h{4}|U\\h{8})'
      }
      {
        'name': 'invalid.illegal.constant.character.escape.schwalbe'
        'match': '\\\\[^uxU]'
      }
    ]
  'identifier':
    'match':
      '(?x)
            (?<identifier>                \\g<identifier-head> \\g<identifier-characters>?
              |                         ` \\g<identifier-head> \\g<identifier-characters>? `
              ){0}
            (?<identifier-head>           [ a-z A-Z ]
              |                           [ \\u00A8 \\u00AA \\u00AD \\u00AF \\u00B2-\\u00B5 \\u00B7-\\u00BA ]
              |                           [ \\u00BC-\\u00BE \\u00C0-\\u00D6 \\u00D8-\\u00F6 \\u00F8-\\u00FF ]
              |                           [ \\u0100-\\u02FF \\u0370-\\u167F \\u1681-\\u180D \\u180F-\\u1DBF ]
              |                           [ \\u1E00-\\u1FFF ]
              |                           [ \\u200B-\\u200D \\u202A-\\u202E \\u203F-\\u2040 \\u2054 \\u2060-\\u206F ]
              |                           [ \\u2070-\\u20CF \\u2100-\\u218F \\u2460-\\u24FF \\u2776-\\u2793 ]
              |                           [ \\u2C00-\\u2DFF \\u2E80-\\u2FFF ]
              |                           [ \\u3004-\\u3007 \\u3021-\\u302F \\u3031-\\u303F \\u3040-\\uD7FF ]
              |                           [ \\uF900-\\uFD3D \\uFD40-\\uFDCF \\uFDF0-\\uFE1F \\uFE30-\\uFE44 ]
              |                           [ \\uFE47-\\uFFFD ]
              |                           [ \\u10000-\\u1FFFD \\u20000-\\u2FFFD \\u30000-\\u3FFFD \\u40000-\\u4FFFD ]
              |                           [ \\u50000-\\u5FFFD \\u60000-\\u6FFFD \\u70000-\\u7FFFD \\u80000-\\u8FFFD ]
              |                           [ \\u90000-\\u9FFFD \\uA0000-\\uAFFFD \\uB0000-\\uBFFFD \\uC0000-\\uCFFFD ]
              |                           [ \\uD0000-\\uDFFFD \\uE0000-\\uEFFFD ]
              ){0}
            (?<identifier-character>      \\d
              |                           [ \\u0300-\\u036F \\u1DC0-\\u1DFF \\u20D0-\\u20FF \\uFE20-\\uFE2F ]
              |                           \\g<identifier-head>
              ){0}
            (?<identifier-characters>     \\g<identifier-character> \\g<identifier-characters>?
              ){0}
            (?<implicit-parameter-name>   (?<!\\g<identifier-head>) \\$ \\d+ (?!\\g<identifier-head>) (?# FIXME)
              ){0}
          \\g<identifier>
        | \\g<implicit-parameter-name>
      '
    'captures':
      '5': #can't seem to use named captures here
          'name': 'variable.other.positional.schwalbe'
  'literal':
    'patterns': [
      {
        'include': '#literal-number'
      }
      {
        'include': '#literal-string'
      }
    ]
  'literal-number':
    'name': 'constant.numeric.schwalbe'
    'match':
      '(?x)
            (?### INTEGER ###)
            (?<integer-literal>                 \\g<binary-literal>
              |                                 \\g<octal-literal>
              |                                 \\g<hexadecimal-literal>
              |                                 \\g<decimal-literal>
              ){0}
            (?### BINARY ###)
            (?<binary-literal>                  \\b 0b \\g<binary-digit> \\g<binary-literal-characters>? \\b
              ){0}
            (?<binary-digit>                    [0-1]
              ){0}
            (?<binary-literal-character>        \\g<binary-digit>
              |                                 _
              ){0}
            (?<binary-literal-characters>       \\g<binary-literal-character> \\g<binary-literal-characters>?
              ){0}

            (?### OCTAL ###)
            (?<octal-literal>                   \\b 0o \\g<octal-digit> \\g<octal-literal-characters>? \\b
              ){0}
            (?<octal-digit>                     [0-7]
              ){0}
            (?<octal-literal-character>         \\g<octal-digit>
              |                                 _
              ){0}
            (?<octal-literal-characters>        \\g<octal-literal-character> \\g<octal-literal-characters>?
              ){0}

            (?### DECIMAL ###)
            (?<decimal-literal>                 \\b \\g<decimal-digit> \\g<decimal-literal-characters>? \\b
              ){0}
            (?<decimal-digit>                   \\d
              ){0}
            (?<decimal-literal-character>       \\g<decimal-digit>
              |                                 _
              ){0}
            (?<decimal-literal-characters>      \\g<decimal-literal-character> \\g<decimal-literal-characters>?
              ){0}

            (?### HEXADECIMAL ###)
            (?<hexadecimal-literal>             \\b 0x \\g<hexadecimal-digit> \\g<hexadecimal-literal-characters>? \\b
              ){0}
            (?<hexadecimal-digit>               \\h
              ){0}
            (?<hexadecimal-literal-character>   \\g<hexadecimal-digit>
              |                                 _
              ){0}
            (?<hexadecimal-literal-characters>  \\g<hexadecimal-literal-character> \\g<hexadecimal-literal-characters>?
              ){0}

            (?### FLOATING POINT ###)
            (?<floating-point-literal>          \\b \\g<decimal-literal>     \\g<decimal-fraction>?     \\g<decimal-exponent>? \\b
              |                                 \\b \\g<hexadecimal-literal> \\g<hexadecimal-fraction>? \\g<hexadecimal-exponent> \\b
              ){0}
            (?<decimal-fraction>                \\. \\g<decimal-literal>
              ){0}
            (?<decimal-exponent>                \\g<floating-point-e> \\g<sign>? \\g<decimal-literal>
              ){0}
            (?<hexadecimal-fraction>            \\. \\g<hexadecimal-literal>?
              ){0}
            (?<hexadecimal-exponent>            \\g<floating-point-p> \\g<sign>? \\g<hexadecimal-literal>
              ){0}
            (?<floating-point-e>                [eE]
              ){0}
            (?<floating-point-p>                [pP]
              ){0}
            (?<sign>                            [+-]
              ){0}
          (?!0[box]) \\g<floating-point-literal>
        |            \\g<integer-literal>
      '
  'literal-string':
    'name': 'string.quoted.double.schwalbe'
    'begin': '"'
    'end': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.schwalbe'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.schwalbe'
    'patterns': [
      {
        'include': '#quoted-text'
      }
    ]
  'operator':
    'patterns': [
        {
          'include': '#operator-character'
        }
      ]
  'operator-character':
    'name': 'keyword.operator.schwalbe'
    'match': '[\\/=\\-+!*%<>&|^~,\\?:\\[\\]]'
  'quoted-text':
    'patterns': [
      {
        'name': 'meta.embedded.line.schwalbe'
        'contentName': 'source.schwalbe'
        'begin': '\\\\\\('
        'end': '\\)'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.embedded.begin.schwalbe'
        'endCaptures':
          '0':
            'name': 'punctuation.section.embedded.end.schwalbe'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'include': '#escaped-char'
      }
    ]
  # 'function':
  #   'name': 'meta.function.schwalbe'
  #   'begin': '(func) \\s*'
  #   'end': '(?=\\{|#)|;|$'
  #   'beginCaptures':
  #     '1':
  #       'name': 'storage.type.function.schwalbe'
  #   'comment': 'match regular function like: func myFunc(...)'
  #   'patterns': [
  #     # TODO: These should be refactored out...
  #     {
  #       'begin': '([^\\s]*)\\s*(\\()'
  #       'beginCaptures':
  #         '1':
  #           'name': 'entity.name.function.schwalbe'
  #         '2':
  #           'name': 'punctuation.definition.parameters.begin.schwalbe'
  #       'comment': 'match regular function like: func myFunc(...)'
  #       'end': '(\\))'
  #       'endCaptures':
  #         '1':
  #           'name': 'punctuation.definition.parameters.end.schwalbe'
  #     }
  #     {
  #       'name': 'meta.return-type.schwalbe'
  #       'match': '((->)\\s*([^\\{]+))'
  #       'captures':
  #         '2':
  #           'name': 'keyword.operator.schwalbe'
  #         '3':
  #           'name': 'entity.name.type.class.schwalbe'
  #     }
  #   ]

  'whitespace':
    'match':
      '(?x)
            [
              \\u0020 (?#           space)
              \\u000A (?#       line-feed)
              \\u000D (?# carriage-return)
              \\u0009 (?#  horizontal-tab)
              \\u000B (?#    vertical-tab)
              \\u000C (?#       form-feed)
              \\u0000 (?#            null)
            ]
      '
